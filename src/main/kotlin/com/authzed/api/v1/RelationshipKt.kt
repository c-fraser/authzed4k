//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: authzed/api/v1/core.proto

package com.authzed.api.v1;

@kotlin.jvm.JvmSynthetic
public inline fun relationship(block: com.authzed.api.v1.RelationshipKt.Dsl.() -> kotlin.Unit): com.authzed.api.v1.Core.Relationship =
  com.authzed.api.v1.RelationshipKt.Dsl._create(com.authzed.api.v1.Core.Relationship.newBuilder()).apply { block() }._build()
public object RelationshipKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.authzed.api.v1.Core.Relationship.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.authzed.api.v1.Core.Relationship.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.authzed.api.v1.Core.Relationship = _builder.build()

    /**
     * <pre>
     * resource is the resource to which the subject is related, in some manner
     * </pre>
     *
     * <code>.authzed.api.v1.ObjectReference resource = 1 [(.validate.rules) = { ... }</code>
     */
    public var resource: com.authzed.api.v1.Core.ObjectReference
      @JvmName("getResource")
      get() = _builder.getResource()
      @JvmName("setResource")
      set(value) {
        _builder.setResource(value)
      }
    /**
     * <pre>
     * resource is the resource to which the subject is related, in some manner
     * </pre>
     *
     * <code>.authzed.api.v1.ObjectReference resource = 1 [(.validate.rules) = { ... }</code>
     */
    public fun clearResource() {
      _builder.clearResource()
    }
    /**
     * <pre>
     * resource is the resource to which the subject is related, in some manner
     * </pre>
     *
     * <code>.authzed.api.v1.ObjectReference resource = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the resource field is set.
     */
    public fun hasResource(): kotlin.Boolean {
      return _builder.hasResource()
    }

    /**
     * <pre>
     * relation is how the resource and subject are related.
     * </pre>
     *
     * <code>string relation = 2 [(.validate.rules) = { ... }</code>
     */
    public var relation: kotlin.String
      @JvmName("getRelation")
      get() = _builder.getRelation()
      @JvmName("setRelation")
      set(value) {
        _builder.setRelation(value)
      }
    /**
     * <pre>
     * relation is how the resource and subject are related.
     * </pre>
     *
     * <code>string relation = 2 [(.validate.rules) = { ... }</code>
     */
    public fun clearRelation() {
      _builder.clearRelation()
    }

    /**
     * <pre>
     * subject is the subject to which the resource is related, in some manner.
     * </pre>
     *
     * <code>.authzed.api.v1.SubjectReference subject = 3 [(.validate.rules) = { ... }</code>
     */
    public var subject: com.authzed.api.v1.Core.SubjectReference
      @JvmName("getSubject")
      get() = _builder.getSubject()
      @JvmName("setSubject")
      set(value) {
        _builder.setSubject(value)
      }
    /**
     * <pre>
     * subject is the subject to which the resource is related, in some manner.
     * </pre>
     *
     * <code>.authzed.api.v1.SubjectReference subject = 3 [(.validate.rules) = { ... }</code>
     */
    public fun clearSubject() {
      _builder.clearSubject()
    }
    /**
     * <pre>
     * subject is the subject to which the resource is related, in some manner.
     * </pre>
     *
     * <code>.authzed.api.v1.SubjectReference subject = 3 [(.validate.rules) = { ... }</code>
     * @return Whether the subject field is set.
     */
    public fun hasSubject(): kotlin.Boolean {
      return _builder.hasSubject()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.authzed.api.v1.Core.Relationship.copy(block: com.authzed.api.v1.RelationshipKt.Dsl.() -> kotlin.Unit): com.authzed.api.v1.Core.Relationship =
  com.authzed.api.v1.RelationshipKt.Dsl._create(this.toBuilder()).apply { block() }._build()
