//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: authzed/api/v1/permission_service.proto

package com.authzed.api.v1;

@kotlin.jvm.JvmSynthetic
public inline fun expandPermissionTreeRequest(block: com.authzed.api.v1.ExpandPermissionTreeRequestKt.Dsl.() -> kotlin.Unit): com.authzed.api.v1.PermissionService.ExpandPermissionTreeRequest =
  com.authzed.api.v1.ExpandPermissionTreeRequestKt.Dsl._create(com.authzed.api.v1.PermissionService.ExpandPermissionTreeRequest.newBuilder()).apply { block() }._build()
public object ExpandPermissionTreeRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.authzed.api.v1.PermissionService.ExpandPermissionTreeRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.authzed.api.v1.PermissionService.ExpandPermissionTreeRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.authzed.api.v1.PermissionService.ExpandPermissionTreeRequest = _builder.build()

    /**
     * <code>.authzed.api.v1.Consistency consistency = 1;</code>
     */
    public var consistency: com.authzed.api.v1.PermissionService.Consistency
      @JvmName("getConsistency")
      get() = _builder.getConsistency()
      @JvmName("setConsistency")
      set(value) {
        _builder.setConsistency(value)
      }
    /**
     * <code>.authzed.api.v1.Consistency consistency = 1;</code>
     */
    public fun clearConsistency() {
      _builder.clearConsistency()
    }
    /**
     * <code>.authzed.api.v1.Consistency consistency = 1;</code>
     * @return Whether the consistency field is set.
     */
    public fun hasConsistency(): kotlin.Boolean {
      return _builder.hasConsistency()
    }

    /**
     * <pre>
     * resource is the resource over which to run the expansion.
     * </pre>
     *
     * <code>.authzed.api.v1.ObjectReference resource = 2 [(.validate.rules) = { ... }</code>
     */
    public var resource: com.authzed.api.v1.Core.ObjectReference
      @JvmName("getResource")
      get() = _builder.getResource()
      @JvmName("setResource")
      set(value) {
        _builder.setResource(value)
      }
    /**
     * <pre>
     * resource is the resource over which to run the expansion.
     * </pre>
     *
     * <code>.authzed.api.v1.ObjectReference resource = 2 [(.validate.rules) = { ... }</code>
     */
    public fun clearResource() {
      _builder.clearResource()
    }
    /**
     * <pre>
     * resource is the resource over which to run the expansion.
     * </pre>
     *
     * <code>.authzed.api.v1.ObjectReference resource = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the resource field is set.
     */
    public fun hasResource(): kotlin.Boolean {
      return _builder.hasResource()
    }

    /**
     * <pre>
     * permission is the name of the permission or relation over which to run the
     * expansion for the resource.
     * </pre>
     *
     * <code>string permission = 3 [(.validate.rules) = { ... }</code>
     */
    public var permission: kotlin.String
      @JvmName("getPermission")
      get() = _builder.getPermission()
      @JvmName("setPermission")
      set(value) {
        _builder.setPermission(value)
      }
    /**
     * <pre>
     * permission is the name of the permission or relation over which to run the
     * expansion for the resource.
     * </pre>
     *
     * <code>string permission = 3 [(.validate.rules) = { ... }</code>
     */
    public fun clearPermission() {
      _builder.clearPermission()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.authzed.api.v1.PermissionService.ExpandPermissionTreeRequest.copy(block: com.authzed.api.v1.ExpandPermissionTreeRequestKt.Dsl.() -> kotlin.Unit): com.authzed.api.v1.PermissionService.ExpandPermissionTreeRequest =
  com.authzed.api.v1.ExpandPermissionTreeRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()
