//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: authzed/api/v1/core.proto

package com.authzed.api.v1;

@kotlin.jvm.JvmSynthetic
public inline fun permissionRelationshipTree(block: com.authzed.api.v1.PermissionRelationshipTreeKt.Dsl.() -> kotlin.Unit): com.authzed.api.v1.Core.PermissionRelationshipTree =
  com.authzed.api.v1.PermissionRelationshipTreeKt.Dsl._create(com.authzed.api.v1.Core.PermissionRelationshipTree.newBuilder()).apply { block() }._build()
public object PermissionRelationshipTreeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.authzed.api.v1.Core.PermissionRelationshipTree.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.authzed.api.v1.Core.PermissionRelationshipTree.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.authzed.api.v1.Core.PermissionRelationshipTree = _builder.build()

    /**
     * <code>.authzed.api.v1.AlgebraicSubjectSet intermediate = 1;</code>
     */
    public var intermediate: com.authzed.api.v1.Core.AlgebraicSubjectSet
      @JvmName("getIntermediate")
      get() = _builder.getIntermediate()
      @JvmName("setIntermediate")
      set(value) {
        _builder.setIntermediate(value)
      }
    /**
     * <code>.authzed.api.v1.AlgebraicSubjectSet intermediate = 1;</code>
     */
    public fun clearIntermediate() {
      _builder.clearIntermediate()
    }
    /**
     * <code>.authzed.api.v1.AlgebraicSubjectSet intermediate = 1;</code>
     * @return Whether the intermediate field is set.
     */
    public fun hasIntermediate(): kotlin.Boolean {
      return _builder.hasIntermediate()
    }

    /**
     * <code>.authzed.api.v1.DirectSubjectSet leaf = 2;</code>
     */
    public var leaf: com.authzed.api.v1.Core.DirectSubjectSet
      @JvmName("getLeaf")
      get() = _builder.getLeaf()
      @JvmName("setLeaf")
      set(value) {
        _builder.setLeaf(value)
      }
    /**
     * <code>.authzed.api.v1.DirectSubjectSet leaf = 2;</code>
     */
    public fun clearLeaf() {
      _builder.clearLeaf()
    }
    /**
     * <code>.authzed.api.v1.DirectSubjectSet leaf = 2;</code>
     * @return Whether the leaf field is set.
     */
    public fun hasLeaf(): kotlin.Boolean {
      return _builder.hasLeaf()
    }

    /**
     * <code>.authzed.api.v1.ObjectReference expanded_object = 3;</code>
     */
    public var expandedObject: com.authzed.api.v1.Core.ObjectReference
      @JvmName("getExpandedObject")
      get() = _builder.getExpandedObject()
      @JvmName("setExpandedObject")
      set(value) {
        _builder.setExpandedObject(value)
      }
    /**
     * <code>.authzed.api.v1.ObjectReference expanded_object = 3;</code>
     */
    public fun clearExpandedObject() {
      _builder.clearExpandedObject()
    }
    /**
     * <code>.authzed.api.v1.ObjectReference expanded_object = 3;</code>
     * @return Whether the expandedObject field is set.
     */
    public fun hasExpandedObject(): kotlin.Boolean {
      return _builder.hasExpandedObject()
    }

    /**
     * <code>string expanded_relation = 4;</code>
     */
    public var expandedRelation: kotlin.String
      @JvmName("getExpandedRelation")
      get() = _builder.getExpandedRelation()
      @JvmName("setExpandedRelation")
      set(value) {
        _builder.setExpandedRelation(value)
      }
    /**
     * <code>string expanded_relation = 4;</code>
     */
    public fun clearExpandedRelation() {
      _builder.clearExpandedRelation()
    }
    public val treeTypeCase: com.authzed.api.v1.Core.PermissionRelationshipTree.TreeTypeCase
      @JvmName("getTreeTypeCase")
      get() = _builder.getTreeTypeCase()

    public fun clearTreeType() {
      _builder.clearTreeType()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.authzed.api.v1.Core.PermissionRelationshipTree.copy(block: com.authzed.api.v1.PermissionRelationshipTreeKt.Dsl.() -> kotlin.Unit): com.authzed.api.v1.Core.PermissionRelationshipTree =
  com.authzed.api.v1.PermissionRelationshipTreeKt.Dsl._create(this.toBuilder()).apply { block() }._build()
