//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: authzed/api/v1/permission_service.proto

package com.authzed.api.v1;

@kotlin.jvm.JvmSynthetic
public inline fun readRelationshipsResponse(block: com.authzed.api.v1.ReadRelationshipsResponseKt.Dsl.() -> kotlin.Unit): com.authzed.api.v1.PermissionService.ReadRelationshipsResponse =
  com.authzed.api.v1.ReadRelationshipsResponseKt.Dsl._create(com.authzed.api.v1.PermissionService.ReadRelationshipsResponse.newBuilder()).apply { block() }._build()
public object ReadRelationshipsResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.authzed.api.v1.PermissionService.ReadRelationshipsResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.authzed.api.v1.PermissionService.ReadRelationshipsResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.authzed.api.v1.PermissionService.ReadRelationshipsResponse = _builder.build()

    /**
     * <code>.authzed.api.v1.ZedToken read_at = 1;</code>
     */
    public var readAt: com.authzed.api.v1.Core.ZedToken
      @JvmName("getReadAt")
      get() = _builder.getReadAt()
      @JvmName("setReadAt")
      set(value) {
        _builder.setReadAt(value)
      }
    /**
     * <code>.authzed.api.v1.ZedToken read_at = 1;</code>
     */
    public fun clearReadAt() {
      _builder.clearReadAt()
    }
    /**
     * <code>.authzed.api.v1.ZedToken read_at = 1;</code>
     * @return Whether the readAt field is set.
     */
    public fun hasReadAt(): kotlin.Boolean {
      return _builder.hasReadAt()
    }

    /**
     * <code>.authzed.api.v1.Relationship relationship = 2;</code>
     */
    public var relationship: com.authzed.api.v1.Core.Relationship
      @JvmName("getRelationship")
      get() = _builder.getRelationship()
      @JvmName("setRelationship")
      set(value) {
        _builder.setRelationship(value)
      }
    /**
     * <code>.authzed.api.v1.Relationship relationship = 2;</code>
     */
    public fun clearRelationship() {
      _builder.clearRelationship()
    }
    /**
     * <code>.authzed.api.v1.Relationship relationship = 2;</code>
     * @return Whether the relationship field is set.
     */
    public fun hasRelationship(): kotlin.Boolean {
      return _builder.hasRelationship()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.authzed.api.v1.PermissionService.ReadRelationshipsResponse.copy(block: com.authzed.api.v1.ReadRelationshipsResponseKt.Dsl.() -> kotlin.Unit): com.authzed.api.v1.PermissionService.ReadRelationshipsResponse =
  com.authzed.api.v1.ReadRelationshipsResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()
